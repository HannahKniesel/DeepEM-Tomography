from abc import ABC, abstractmethod
import torch

class AbstractModel(torch.nn.Module):
    """
    A base class for deep learning models, extending `torch.nn.Module`.
    This class defines essential methods for model architectures including:
    - A method for resetting model parameters.
    - A forward pass method to be implemented by subclasses.
    - A method for making predictions with the model.
    
    It is intended to be inherited by specific model classes to define the architecture and training logic.

    Attributes:
        None

    Methods:
        __init__: Initializes the AbstractModel class and inherits from `torch.nn.Module`.
        reset_model_parameters_recursive: Recursively resets the parameters of all layers in the model.
        forward: Defines the forward pass (to be implemented by subclasses).
        predict: Uses the model to make predictions on input data.
    """
    
    def __init__(self):
        """
        Initializes the AbstractModel class, which extends `torch.nn.Module`.
        This serves as a base class for all deep learning models. It provides methods 
        for resetting model parameters, performing the forward pass, and making predictions.
        """
        super(AbstractModel, self).__init__()

    def reset_model_parameters_recursive(self):
        """
        Recursively reset the parameters of all layers in a PyTorch model.

        This method traverses through the model and resets the parameters of any layers 
        that have a `reset_parameters` method, which is commonly used in layers like 
        `nn.Conv2d` and `nn.Linear`.

        Example usage:
            model.reset_model_parameters_recursive()
        """
        for layer in self.modules():
            if hasattr(layer, 'reset_parameters'):
                layer.reset_parameters()

    @abstractmethod
    def forward(self, x):
        """
        The forward pass of the model.

        Args:
            x (torch.Tensor): The input tensor, typically the data that will be passed 
                              through the model to generate an output.

        Returns:
            torch.Tensor: The output tensor generated by the model after performing 
                          computations on the input.

        This method must be implemented by subclasses, as each model will have 
        its own architecture and forward pass logic.
        
        Example usage:
            output = model(x)
        """
        raise NotImplementedError("The 'forward' method must be implemented by the DL specialist.")

    @abstractmethod
    def predict(self, x):
        """
        Make predictions using the model.

        This method puts the model into evaluation mode (disabling dropout, batch norm, etc.)
        and performs inference without computing gradients (using `torch.no_grad()`).

        Args:
            x (torch.Tensor): The input tensor, typically the data that will be passed 
                              through the model to generate a prediction.

        Returns:
            torch.Tensor: The predicted output from the model.

        Example usage:
            predictions = model.predict(x)
        """
        self.eval()  # Set the model to evaluation mode (disables dropout, batch norm, etc.)
        with torch.no_grad():
            return self.forward(x)
